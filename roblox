print("Close Script = F8")
print("Switch Mode (Team/Solo) = F1")
print("Teleport = F")
print("Toggle Aimbot = T")

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local player = Players.LocalPlayer
local running = true
local currentMode = "solo"
local inputConnection = nil
local aimbotActive = false
local targetPlayer = nil

-- Find the closest valid player
local function getClosestPlayer(ignoreTeam, minDistance)
    local myChar = player.Character
    if not myChar or not myChar:FindFirstChild("HumanoidRootPart") then return nil end

    local myPos = myChar.HumanoidRootPart.Position
    local closestPlayer = nil
    local minDist = math.huge

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local humanoid = otherPlayer.Character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local isEnemy = true
                if not ignoreTeam and player.Team and otherPlayer.Team then
                    isEnemy = otherPlayer.Team ~= player.Team
                end

                if ignoreTeam or isEnemy then
                    local dist = (myPos - otherPlayer.Character.HumanoidRootPart.Position).Magnitude
                    if dist >= minDistance and dist < minDist then
                        minDist = dist
                        closestPlayer = otherPlayer
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Find the closest enemy's head within a range
local function getClosestEnemyHeadInRange(range)
    local myChar = player.Character
    if not myChar or not myChar:FindFirstChild("HumanoidRootPart") then return nil end

    local myPos = myChar.HumanoidRootPart.Position
    local closestHead = nil
    local closestDist = math.huge

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
            local humanoid = otherPlayer.Character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local head = otherPlayer.Character.Head
                local dist = (myPos - head.Position).Magnitude

                local isEnemy = true
                if player.Team and otherPlayer.Team then
                    isEnemy = player.Team ~= otherPlayer.Team
                end

                if isEnemy and dist <= range and dist < closestDist then
                    closestHead = head
                    closestDist = dist
                end
            end
        end
    end

    return closestHead
end

-- Find player whose head is closest to screen center
local function getClosestEnemyToScreenCenter(maxDistance)
    local closestHead = nil
    local smallestDistance = math.huge
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
            local humanoid = otherPlayer.Character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local isEnemy = true
                if player.Team and otherPlayer.Team then
                    isEnemy = player.Team ~= otherPlayer.Team
                end

                if isEnemy then
                    local head = otherPlayer.Character.Head
                    local distanceToPlayer = (player.Character.HumanoidRootPart.Position - head.Position).Magnitude
                    if distanceToPlayer <= maxDistance then
                        local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
                        if onScreen then
                            local distFromCenter = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                            if distFromCenter < smallestDistance then
                                smallestDistance = distFromCenter
                                closestHead = head
                            end
                        end
                    end
                end
            end
        end
    end

    return closestHead
end

-- Aimbot aiming loop
RunService.RenderStepped:Connect(function()
    if not running then return end

    if aimbotActive and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local head = targetPlayer.Character.Head
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, head.Position)
    end
end)

-- Toggle Aimbot with T
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end

    if input.KeyCode == Enum.KeyCode.T then
        aimbotActive = not aimbotActive
        if aimbotActive then
            local head = getClosestEnemyToScreenCenter(500)
            if head then
                targetPlayer = Players:GetPlayerFromCharacter(head.Parent)
            end
            print("Aimbot: ON")
            StarterGui:SetCore("SendNotification", {
                Title = "Aimbot",
                Text = "Aimbot aktiviert (T)",
                Duration = 3
            })
        else
            targetPlayer = nil
            print("Aimbot: OFF")
            StarterGui:SetCore("SendNotification", {
                Title = "Aimbot",
                Text = "Aimbot deaktiviert (T)",
                Duration = 3
            })
        end
    end
end)

-- Enable auto-aim for 1 second (used after teleport)
local function enableAimbotForOneSecond()
    aimbotActive = true
    task.delay(1, function()
        aimbotActive = false
    end)
end

-- Activate mode (solo/team)
local function activateMode(mode)
    deactivateCurrentMode()

    inputConnection = UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end

        -- Teleport to target
        if input.KeyCode == Enum.KeyCode.F and running then
            local target = nil
            if mode == "team" then
                target = getClosestPlayer(false, 30)
            else
                target = getClosestPlayer(true, 0)
            end

            if not target then return end

            local myChar = player.Character
            if target and target.Character and myChar then
                local targetHRP = target.Character:FindFirstChild("HumanoidRootPart")
                local myHRP = myChar:FindFirstChild("HumanoidRootPart")

                if targetHRP and myHRP then
                    local backOffset = targetHRP.CFrame.LookVector * -1
                    local newPos = targetHRP.Position + backOffset
                    myHRP.CFrame = CFrame.new(newPos, targetHRP.Position)
                    print("Teleported to:", target.Name)
                    enableAimbotForOneSecond()
                end
            end
        end

        -- Stop with F3
        if input.KeyCode == Enum.KeyCode.F3 then
            running = false
            print("Stopped (F3).")
        end

        -- Close script with F8
        if input.KeyCode == Enum.KeyCode.F8 then
            running = false
            deactivateCurrentMode()
            print("Script closed (F8).")
            StarterGui:SetCore("SendNotification", {
                Title = "Script Closed";
                Text = "Script closed";
                Duration = 5
            })
            if inputConnection then
                inputConnection:Disconnect()
            end
        end
    end)

    print("Mode activated:", mode)
    StarterGui:SetCore("SendNotification", {
        Title = "Mode switched";
        Text = "Mode: " .. (mode == "team" and "Team mode" or "Solo mode");
        Duration = 5
    })
end

function deactivateCurrentMode()
    if inputConnection then
        inputConnection:Disconnect()
        inputConnection = nil
    end
end

-- Start in solo mode
activateMode(currentMode)

-- Switch modes with F1
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.F1 then
        currentMode = (currentMode == "solo") and "team" or "solo"
        activateMode(currentMode)
    end
end)

-- Welcome message
StarterGui:SetCore("SendNotification", {
    Title = "Keybinds";
    Text = "Open console (F9) to view keybinds\n\nHello, " .. player.DisplayName;
    Icon = "rbxthumb://type=AvatarHeadShot&id=" .. player.UserId .. "&w=180&h=180";
    Duration = 10
})

-- External script loader
loadstring(game:HttpGet('https://raw.githubusercontent.com/Lucasfin000/SpaceHub/main/UESP'))()






local UserInputService = game:GetService("UserInputService")

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ScriptHubUI"
ScreenGui.Parent = game.CoreGui
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true  -- Wichtig fÃ¼r Mobile

local ToggleButtonFrame = Instance.new("Frame")
ToggleButtonFrame.Name = "ToggleButtonFrame"
ToggleButtonFrame.Parent = ScreenGui
ToggleButtonFrame.BackgroundTransparency = 1
ToggleButtonFrame.Position = UDim2.new(0.5, -37, 0.5, -37)  -- Mitte des Bildschirms
ToggleButtonFrame.Size = UDim2.new(0, 75, 0, 75)
ToggleButtonFrame.BorderSizePixel = 2
ToggleButtonFrame.BorderColor3 = Color3.fromRGB(255, 0, 0)

local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Parent = ToggleButtonFrame
ToggleButton.BackgroundTransparency = 1
ToggleButton.Size = UDim2.new(1, 0, 1, 0)
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.Text = "Drag on scope for Aim-bot"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextScaled = true

local UICorner = Instance.new("UICorner")
UICorner.Parent = ToggleButton

-- Global toggle variable
_G.isTHeld = false

-- Drag & tap logic
local dragging = false
local dragStartPos
local inputStartPos
local mouseDownTime = 0

local function beginDrag(input)
mouseDownTime = tick()
dragging = true
dragStartPos = ToggleButtonFrame.Position
inputStartPos = input.Position
end

local function updateDrag(input)
local delta = input.Position - inputStartPos
ToggleButtonFrame.Position = UDim2.new(
dragStartPos.X.Scale,
dragStartPos.X.Offset + delta.X,
dragStartPos.Y.Scale,
dragStartPos.Y.Offset + delta.Y
)
end

local function endDrag(input)
dragging = false
local heldDuration = tick() - mouseDownTime
if heldDuration < 0.1 then
_G.isTHeld = not _G.isTHeld
end
end

ToggleButton.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
beginDrag(input)
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.T then
        _G.isTHeld = not _G.isTHeld
        onTPressed()
    end
end)

